;
;	Hide the udata above the I/O in the gap before the EEPROM
;
.equ U_DATA                      , 0xF200       ; (this is struct u_data from kernel.h)
.equ U_DATA__TOTALSIZE           , 0x200        ;
.equ IRQ_STACK		    , 0xF400
.equ EESTACK			    , 0xF600	     ; used for eeprom stuff

;
;	EEPROM entry points
;
;	A = bank
;	X = src, returns value in B or D
.equ fargetb			, 0xF840
.equ fargetw			, 0xF843
;
;	A = bank B = value
;	X = dst
;
.equ farputb			, 0xF846
;
;	A = bank
;	X = dst, Y = value
;
.equ farputw			, 0xF849
;
;	A = srcbank, B = dstbank
;	X = dst, Y = src
;	kernel:_tmp1 = length (in kernel bank)
;
.equ farcopy			, 0xF84C
;
;	A = bank, X = function, Y = far stack
;
.equ farcall			, 0xF84F
;
;	A = bank, X = function, Y = far stack
;
.equ farjump			, 0xF852
;
;	A = bank
;
.equ setbank			, 0xF855
;
;	D = 0
;
.equ reboot			, 0xF858
;
;	A = srcbank, B = dstbank
;	X = dst, Y = src
;	kernel:_tmp1 = length (in kernel bank)
;
.equ farzcopy			, 0xF85B
;
;	A = bank
;	X = dst
;	Y = len
;
;	Return in D
;
.equ farzero			, 0xF85E
;
;
;
;	Low memory usage (not banked)
;
.equ tmp1			, 0xFE		; 16bits
.equ curbank			, 0xFD
.equ usrbank			, 0xFC		; we track this to emulate
						; usermode copy stuff
