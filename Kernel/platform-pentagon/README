Experimental porting work for Pentagon and similar systems that have the ability
to somehow get the low 16K mapped into page 0 and have at least 256K of RAM.

For now we hardcode 256K and Pentagon style rules (although it seems they
vary even by pentagon type). As far as I can make out the basic rules for
each type are

Everyone uses 0x7FFD bits 0-2 = low 128K bank select, and 3 to move video

Then it gets more complicated (and the partial decode ports make it worse)

Pentagon uses bits 7/6 to allow for 512K RAM

Some pentagon designs use 1FFD bit 0 to put RAM 0 into the low 16K, and
use 1FFD bits 4 and 7 instead of 7FFD bits 7/6

Pentagon 1MB uses EFF7 bit 3 to turn on the RAM mapping

Scorpion 256/Kay 256 uses 1FFD bit 0 to put RAM 0 into the low 16K and then
uses 1FFD bit 4 for the 256K select. Scoripon uses 4/6/7 if 1MB
Kay 1MB uses 1FFD 4 and 7 for 256/512 and 7FFD bit 7 for 1MB bank (why!!!)

ZX Profi uses DFFD bits 0-2 to select the upper page bits. Those that
support it (Profi 1024 ?) bit 4 maps RAM0. There are other weird mappings
too.

ATM us FDFD bits 0-2 but early ones can't map over ROM. Late ATM goes up to
4MB and can

What a mess 8)

----
These machines all have the same basic problem, there is a 16K window at
C000-FFFF which is pageable but no bigger pageable range.

We run with the following mapping

0000-3FFF	IRQ vectors, common, const, commondata etc
4000-5FFF	Spectrum screen memory and system variables
6000-7FFF	Free for now
8000-83FF	Needed to create the exec of init
8400-BFFF	_DISCARD area - blown away when we exec init
		(tons of room in this space)
C000-FFFF
	0:	0000-3FFF
	1:	Kernel CODE (fairly full)
	2:	Mapped at 0x8000-0xBFFF (holds current process copy)
	3:	User process
	4:	User process
	5:	Mapped at 0x4000-0x7FFF (Sceen, Kernel data/common)
	6:	Kernel CODE2 (fairly full)
	7:	CODE3, Video (lots of room)

User processes live in 3/4 and 8+. We have copy stuff back and forth
to page 2 due to the memory manager liits.

To Do:

-	Why does ls /bin lose the lowest pixel row of the 'yes' command ?
	(Seems we lose the bottom line of the left most char - off by one bug
	 in zxvid ?)
-	Enable interrupts during swap
-	6 or 5bit wide fonts (42, 51 column)
-	Optimize zxvid - especially scrolling
-	SMUC and similar IDE options
-	Move vtborder to common
-	See if we can in fact keep 6000-7FFF clear. If so we can look at
	ldir switching another 8K up and down to give 40K program sizes
	which would be a big improvement. Would need us to allocate 2.5
	banks per process however so need some allocator changes

Floppy disk interfaces are problematic. The standard Betadisk interface locks
the I/O ports to its ROM being active, which sucks. Fortunately it appears
there is a mildy insane stunt we can pull. We can use the ROM to query itself
to find the address of the out (c),a present in all Beta ROM images.

We can then do a ROP attack on the ROM in order to make it do the "right"
out (c),a  in it in order to do a bank switch with RAM at 0000-3FFF and catch
the next instruction. Providing we remain in the RAM below 4000 it'll leave
the card selected.

Does mean we need to patch our kernel to grab the next instruction, and then
put it back all under di but it does look doable.


TODO

-	Write spectrum style and also disk boot style loaders
-	Debug the loading
-	Debug the rest
-	Write SMUC and Nemo ATA driver code
-	Work out what we need to do for Pentagon v Scorpion etc
-	Floppy driver
