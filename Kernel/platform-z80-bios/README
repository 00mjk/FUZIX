TODO

DONE -	Fix disk interface to have common stubs that do banking
-	Use info to set common base, program size, buffers etc
DONE -	Make termios copy back data, check matches test bios
DONE -	Write the tty allocation/set up code as per rc2014
DONE -	Rewrite the buffer allocation logic to work with the memory map
	as we can't land the bios code before our code/after our data
	(initial version - need to redo a bit for discards)
DONE -	Add interface to say callbacks set
DONE -	Add pieces to call BIOS (jump table)
IP -	For now asm and link BIOS after kernel to test
-	Write fake external buffer wrappers
-	Attempt to make this boot with a simple hack fuzixbios on say
	sbcv2
-	Set tty defaults from calls
-	Add bios interfaces for keyboard (up/down input notification and
	key mask etc)
-	Check off by ones in the malloc logic
-	Make vt hints set tty size info
-	Floppy driver
-	Disk ioctls and extend param interface
-	Media change notifier
-	Bank to bank copier hook ?
DONE -	lp error reporting
-	Error code sort out
-	soft di/ei
-	interrupt driven parallel ?
-	header file for asm includes (errno codes, baud rates etc)
DONE -	Who should own space allocation between bios and common - do we
	have a bios "malloc" handler ?
IP -	How do we do discard areas ? (just need to write extra buf allocator)

Fixed assumptions to cure

udata stash location is hardcoded needs to be (xxxx) form option in asm
program top is hard coded but needs to adjust
memory needed per program likewise


Memory map

0000-007F	Vectors
0080-		Kernel (banked)		(can be higher if linked there)
		BIOS (banked)
		--
		Kernel (common)
		BIOS (common)
		workspace if needed


User space
0000-00FF	Vectors etc
0100-BDFF	Application (depends upon common base)
BE00-BFFF	Udata copy
C000+		common