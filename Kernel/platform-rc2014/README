This is Fuzix for the RC2014

The starting point was Scott Baker's git tree but this has been seen been
rather reworked. 

Modified for RC2014 with FlashROM/Ram board by Scott Baker <smbaker@gmail.com>.

Heavily based on prior work by Will Sowerbutts <will@sowerbutts.com>, 
Sergey Kiselev <skiselev@gmail.com>, and others.

Supported Hardware

	RC2014 Z80 card or compatible

	512K ROM / RAM board. This board is basically a clone of the memory
	management subsystem of the Zeta V2. It replaces the RC2014's
	default ROM and RAM boards.

	A serial IO board. Either an RC2014 SIO/2 board or a 68B50 ACIA board.
	If you have a Scott Baker SIO/2 card you'll need to see config.h

	DS1302 RTC at 0xC0 (eventually CTC and no RTC will be allowed too)

	Options:

	CTC board at 0x88

	VFD Display. If config.h:CONFIG_VFD_TERM is defined, then the VFD
	Terminal will be supported. This will display all output to the serial
	port on the VFD.

	The RC2014 CF card interface, or compatible at 0x10.

	Floppy Drive Interface

	RC2014 Joystick

In Progress

	PPIDE

Unsupported Hardware

	SC108/SC114 or other CPU boards with their own banking instead of the
	512K ROM/RAM

	SC114 bit bang serial

	Z80 PIO cards (really because I've no idea how to present them)

	SC110 CTC/serial (it uses CTC 1 for the serial baud but we try and
	use it for other things). Will rework the core code to use the CTCs
	differently to fix this at some point


Things To Note When Modifying

  * Space is very tight. The kernel must finish below C000 and the rest goes
    above the common line (D000).
  * We should move to banked kernel to allow for more flexibility with all
    this add in hardware.
  * Do not move discard below C300 on a 16K banking setup. There is stuff in
    start.c that requires that C000-C2FF space is free for starting init from
    the kernel.

Things that don't work

  * Flow control isn't yet enabled for the serial port.

  * PPIDE

Stuff To Do

  * Rework the CTCs if we can so we use CTC2 as a timer for the CTC clock and
    use CTC3 to count CTC0 overflows. That way we can use the CTC2 interrupt
    and the CTC3 value together in order to a) spot missed events and b) allow
    us to run without using IM2 given the poor IM2 support on RC2014. That
    then still allows us to use CTC1 for UART speed, and hopefully CTC0 for
    single step debugging. Note that we are forced to use CTC1 for serial
    for the SC110 card, and we want adjacent CTCs for jumpering convenience
    for the timer. Also there is no ZT3 so it's the one timer that can't
    chain so is best for the tick counter.

  * Detect and optimize code paths in CTC mode - the extra DS1302 accesses we
    have to do are really expensive.

  * Can we detect which kind of SIO and CTC we have and where

  * Other tty options - can we autodetect 16550A at 0x80. Detect SIO at 0x84.

  * Probe both 0x10 and 0xE0 for CF ?

  * How to represent a Z80 PIO usefully to Fuzix (similar issues with Nascom)
    both raw and hosting an interface (eg /dev/lp or even floppy)

  * Work out how to co-exist better and maybe even modify ROMWBW so we can
    use it

  * Swap (it's there but it's most certainly not debugged or wired up fully)

  * TMS9918A support now there is a suitable card

  * Sound support once we have the core sound layer

  * Some kind of way to allow selection of what support is wanted. We are
    very tight on space with everything enabled and it won't be possible to
    do some of the combinations we have today with the TMS9918A as well unless
    we go to banked syscall (Which is doable)

  * Push the tty buffers into the banked space to give us room for four ttys

  * Go the soft IRQ route with fast SIO serial handling for rx interrupts and
    flip buffers. Also raises space issues as we'll need 256 bytes per SIO
    plus the other costs

Setting It Up

Fuzix on the RC2014 expects a normal PC style compact flash card. Fdisk up the
card leaving the low space free as fdisk tries to do. Place a file system on
it (type 0x7F). Do not at this point place a swap partition on it (0x7E)
although you can certainly reserve on with a different type code.

The loader and attached kernel image needs to be written to blocks 2+.

You can manipulate the filesystem with ucp.

If you are doing this with the emulator then the easiest way is to use makedisk
to create a disk of suitable size and then

	dd if=foo.cf of=foo.raw skip=2
	fdisk foo.raw

	add the file systems etc onto it (either by loopback mounting or
	using dd remembering the start sector given can be used with
		dd bs=512 seek=startsector conv=notrunc ...

	dd if=foo.raw of=foo.cf seek=2 conv=notrunc

When working on a real CF card or the raw file add the bootable image with

	dd if=fuzix.romwbw of=/dev/sdxx seek=2 conv=notrunc

to place the bootable image on sectors 2 and above in the hole the fdisk tool
leaves for a bootable image.

As ucp and fsck.fuzix support offsets in the format path:offset you can access
the first file system with ucp foo.cf:1049600 if it starts at block 2048 of the
CF card as normal.

Then you can run
./rc2014 -b -r 512.rom  -i foo.cf  -s  -w -R -c 
