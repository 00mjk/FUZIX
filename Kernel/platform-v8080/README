Some initial development code for 8080 support

Also to deal with
- The C compiler bombs on the adventure game builds
- The preprocessor can't handle netd or fforth

Compiler:
	- it uses BC as a frame pointer instead of tracking HL and using BC
	  as a register variable temporary
	- it's obsessed with 8 to 16 bit conversion of anything it works on
	  internally
	- it doesn't know anything about passing the top of arguments in a
	  register (trickier because you put a hole in the frame if you are
	  not careful)

SDCC can almost generate 8080 code so is another possibility if we can't hack
up. However its codegen isn't that much better although it could also be coaxed
(and probably more easily) into using helpers. At least it knows how to optimize
8bit operations and also to use bc and top of stack as temporaries.

8085 will need more thinking. ACK has some assumptions that don't work well if
you use the undocumented 8085 stuff.


Status
FIXED - perror fails
FIXED - pagesize appears to be bogus (reports 0)
FIXED - calendar goes mad
- cp is incredibly slow ?



Known things to save for re-entrancy

Libem:

.retadr
.retadr1
.bcreg
.tmp1
.areg

Specific to .divi4 .mli4 

block1
block1+2
block2
block3
block2+2
block3+2


Is sar2 right - does mli not mlu ?

Listed elsewhere
 .fra:8			8 byte function return area (for double ?)

