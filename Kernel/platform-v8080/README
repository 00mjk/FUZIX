Some initial development code for 8080 support

Bugs:
- Lots of userspace crashes and problems

Also to deal with
- The C compiler bombs on the adventure game builds
- The preprocessor can't handle netd or fforth
- We need signal handler code and kernel IRQ code to save memory temporaries
  that make the code non-reentrant. It's not actually that bad - we save a
  load less registers after all!

Compiler:
	- it uses BC as a frame pointer instead of tracking HL and using BC
	  as a register variable temporary
	- it's obsessed with 8 to 16 bit conversion of anything it works on
	  internally
	- it doesn't know anything about passing the top of arguments in a
	  register (trickier because you put a hole in the frame if you are
	  not careful)

SDCC can almost generate 8080 code so is another possibility if we can't hack
up. However its codegen isn't that much better although it could also be coaxed
(and probably more easily) into using helpers. At least it knows how to optimize
8bit operations and also to use bc and top of stack as temporaries.

8085 will need more thinking. ACK has some assumptions that don't work well if
you use the undocumented 8085 stuff.


Status
- perror fails
- ps - prints crap for numbers in printf %-n d
- ed and sh crash (both setjmp/longjmp users ?)
- uptime also shows the corruption of printf
- as does free
- pagesize appears to be bogus (reports 0)
- wumpus dies after instructions prompt - kills box
- rev crashes box
- calendar goes mad
- advent prompts for save y/n then dies
- cp is incredibly slow ?
