Some initial development code for 8080 support

Bugs:
tty behaves oddly once it hits shell (newline doesn't work stuff^J seems to, and
shell shows [junk] not found in child - but that could be arg copying bugs)
could be some kind of uput bug ?

Also to deal with
- The C compiler bombs on the adventure game builds
- The preprocessor can't handle netd or fforth
- We need signal handler code and kernel IRQ code to save memory temporaries
  that make the code non-reentrant. It's not actually that bad - we save a
  load less registers after all!
- The compiler is too verbose at the moment. In particular it needs
	- helpers for stack relative fetch and put of 16bits
	- sub hl,de
	- the tail code
	- function entry
  and
	- use the call to a jp (hl) trick for indirect calls
	- not generate pointless entry/exit code when not needed
	- generate optimized code for and/or where one byte of the 16bits is
	  zero
	- generate a helper for setting the frame pointer

	More generally it sucks because
	- it uses BC as a frame pointer instead of tracking HL and using BC
	  as a register variable temporary
	- it's obsessed with 8 to 16 bit conversion of anything it works on
	  internally
	- it doesn't know anything about passing the top of arguments in a
	  register (trickier because you put a hole in the frame if you are
	  not careful)

SDCC can almost generate 8080 code so is another possibility if we can't hack
up. However its codegen isn't that much better although it could also be coaxed
(and probably more easily) into using helpers. At least it knows how to optimize
8bit operations and also to use bc and top of stack as temporaries.

8085 will need more thinking. ACK has some assumptions that don't work well if
you use the undocumented 8085 stuff.
