Initial testing build for Tiny68K

You need a disk image with the boot loader on LBA 1 and the kernel on LBA 2+
Block 0 should hold a partition table and you must have a swap partition (type
7F).

To get us going and also debug some userspace problems along the way (32 bit
cleanliness, alignment) we are pretending to be a tiny system with only
enough RAM for one process at a time. It'll do to get us up and going.

Unsupported right now:
- RTC
- Detect if monitor is loaded high and if so avoid it
- Trapping back into monitor if high
- Reboot

Known problems
--------------

Traps need to report their actual trap number and the correct type and
frame (optionally for userspace)
Trap need to report extra frame info (eg address of bus error)

Signals need to include trap frame on stack and unwind it or siginfo ptr
or somesuch ?

Trap/signal recovery is broken somewhere. Easy way to see is when we get
a hail of errors from fforth. We eventually blow up with signal in kernel mode

We ssig on a trap, but for a synchronous trap we need immediate delivery
and ssig does not ensure that. What else is needed ? - chksigs and trap
exit path with signal ?
	- Directly check masking on our trap
	- If blocked RTE back
	- If uncaught act immediately (ignore or kill)
	- If vectored push pending signal back, push frame and RTE
	  through that frame direct to a signal handler.


fforth doesn't work (panic data stack underflow and traps out)

68010 support - frame sizes needed but also the code to deal with move
to/from sr from user

Core dumps are unfinished (need to include trap frame info and a lot
more)

Something null pointers at boot time (sh)
	- sh null pointers on ">/var/run/utmp"

Select doesn't work (need new hash algorithm for bigger setups)

(CURSES lib) invaders always reports that the terminal is too small
(stty reports rows cols correctly)

All I/O going via buffers

Sometimes get a trap then it repeats
(various panics - trap then nready panic, switch fail etc)

Is the header and binary start mismatch right (seems to be 0x48 v 0x44)

cpuinfo does not support 68K. Need to probe in kernel and add a new devsys
ioctl to hand back an arch specific blob ?

Pick a final trap number that is clear of any interesting emulations

Should sh report (core dumped)?

To Do
-----

DONE Add a 'user touches kernel' catcher on the debug/sim
DONE ps user/kernel include mismatch error
DONE (libc bug) calendar does not put a : before 'cannot open file'
DONE fsh editing does not seem to work (build bug ?)
DONE (longjmp bug) sh exit command touches blows up
DONE levee just exits (bug in execve) now correctly says too big
DONE startrek pauses before hit any key to accept message
DONE (sh longjmp bug) init forgets to run the bootwait stuff
DONE (sh longjmp bug) shutdown doesn't
DONE chmem does not support 68K (and fixed size too)

