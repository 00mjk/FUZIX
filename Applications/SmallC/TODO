- Parse assignment to local variables
	auto x = 4; etc
- Assignment to global pointers (generate

foo: defw L1234
L1234: data ..
)

- tokenize and parse types properly so we can add real types to the compiler
  (even if we don't yet do anything remotely valid for type promotions)
- Write some copt rules to stop the output sucking so much
- Steal the rst tricks done by BDS C
- Can we split the preprocessor optionally
- Work out what is needed for stack frame based Z80 code

- Clean up optimizier rules now we have ;end
- Flag void v non void to optimizer (elimination of trailing loads)
- How to do tail load elimination but avoid breaking the way it relies
  upon that for returns ? - is the jump $1 reliable for that ? (take care if
  we eliminate the jump $1 for a label)
- Proper constant typing
- Type promotion

Macro ops for bytecode form

load r1 (fprel)			; with pre/post inc dec
store r1 (fprel)		; ditto

And ditto with 'and indirect' or bytes (signed and unsigned)

ie so we can generate as a 2 byte op

	load r1 [(2+fp)++]


Z80 registers

BC - providing we tweak the varargs bits (int)
IY - pointer
IX - pointer (maybe)

RST ops ?

- stack indirections
- complex ops (RSTm aa ll  RSTn aa ll hh)
	- pre/post inc load/stores with or without indirection
	- stack shifts


Insane compression idea

Generate code as tags plus expression trees
Native code them in order to get a size / perf cost
At link time re-scan *all* the trees and identify the duplicated subtrees
if they exceed a certain cost then call them as helper code

Turn that program into native code (or final bytecode)
